import java.util.jar.JarFile

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:$SHADOW_PLUGIN_VERSION"
  }
}

apply plugin: "java-library"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.jfrog.bintray"

// ------------------------------------------------------------------------------------------------
// Dependency Definitions
// This module exports a "fat JAR" containing embedded JARs from IntelliJ IDEA,
// using a shadowed JAR that overrides the default build artifact.
//
// Path to this JAR inside an IntelliJ IDEA package:
// "plugins/junit/lib/junit5-rt.jar"
// ------------------------------------------------------------------------------------------------

dependencies {
  implementation files("libs/junit5-rt.jar")
}

shadowJar {
  // Remove '-all' suffix from the generated JAR
  classifier = null
  version = VERSION_NAME
}

// Replace the default JAR task with the "shadow version",
// to avoid accidentally overriding it with the empty, non-shadowed JAR
// upon deploying a version to users via Bintray or Sonatype OSS
jar.enabled = false
jar.dependsOn shadowJar

// ------------------------------------------------------------------------------------------------
// Deployment Setup
//
// Releases are pushed to jcenter via Bintray, while snapshots are pushed to Sonatype OSS.
// This section defines the necessary tasks to push new releases and snapshots using Gradle tasks.
// ------------------------------------------------------------------------------------------------

// Include sources.jar archive in each release
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}

// Include javadoc.jar archive in each release
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

version = VERSION_NAME

publishing {
  publications {
    library(MavenPublication) {
      project.shadow.component(it)
    }
  }
}

// Copy POM to location expected by Bintray
task copyPom(type: Copy) {
  from "build/publications/library"
  into "build/poms"
  include "pom-default.xml"
}

publish.dependsOn copyPom

def verifyJarNotEmpty = {
  // Manually verify that the JAR file isn't "empty"
  // before attempting the upload. This happens on accidental
  // upload attempts without first deploying the shadowJar.
  def jarFile = new JarFile(shadowJar.archivePath)
  if (jarFile.getEntry("com") == null) {
    throw new AssertionError("The embedded-runtime JAR is empty!")
  }
}

project.configure(project) {
  if (project.version.endsWith("-SNAPSHOT")) {
    // Configure deployment of snapshot versions to Sonatype OSS
    project.publishing {
      repositories {
        maven {
          name "snapshot"
          credentials {
            username project.ext.sonatypeUser
            password project.ext.sonatypePass
          }
          url "https://oss.sonatype.org/content/repositories/snapshots"
        }
      }
    }
    publish.doFirst verifyJarNotEmpty
  } else {
    // Configure deployment of release versions to Bintray
    project.bintray {
      user = project.ext.bintrayUser
      key = project.ext.bintrayKey
      configurations = ["archives"]
      dryRun = false
      pkg {
        repo = "maven"
        name = RUNTIME_ARTIFACT_ID
        userOrg = project.ext.bintrayUser
        licenses = [RUNTIME_LICENSE_NAME]
        publish = true
        publicDownloadNumbers = true
        vcsUrl = VCS_URL
        version {
          name = VERSION_NAME
          desc = RUNTIME_DESCRIPTION
        }
      }
    }

    bintrayUpload.doFirst verifyJarNotEmpty
  }
}
